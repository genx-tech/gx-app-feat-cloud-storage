{"version":3,"sources":["../src/index.js"],"names":["Feature","Helpers","requireConfig","require","InvalidConfiguration","mapOfVendorToDriver","digitalocean","aws","azure","module","exports","type","SERVICE","groupable","load_","app","options","name","vendor","serviceOptions","driver","StorageService","service","registerService"],"mappings":";;;;AAAA,MAAM;AACFA,EAAAA,OADE;AAEFC,EAAAA,OAAO,EAAE;AAAEC,IAAAA;AAAF;AAFP,IAGFC,OAAO,CAAC,WAAD,CAHX;;AAIA,MAAM;AAAEC,EAAAA;AAAF,IAA2BD,OAAO,CAAC,aAAD,CAAxC;;AAEA,MAAME,mBAAmB,GAAG;AACxBC,EAAAA,YAAY,EAAE,IADU;AAExBC,EAAAA,GAAG,EAAE,IAFmB;AAGxBC,EAAAA,KAAK,EAAE;AAHiB,CAA5B;AAWAC,MAAM,CAACC,OAAP,GAAiB;AAKbC,EAAAA,IAAI,EAAEX,OAAO,CAACY,OALD;AAWbC,EAAAA,SAAS,EAAE,IAXE;AA4BbC,EAAAA,KAAK,EAAE,gBAAgBC,GAAhB,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AACvCf,IAAAA,aAAa,CAACa,GAAD,EAAMC,OAAN,EAAe,CAAC,QAAD,EAAW,SAAX,CAAf,EAAsCC,IAAtC,CAAb;AAEA,UAAM;AAAEC,MAAAA,MAAF;AAAUF,MAAAA,OAAO,EAAEG;AAAnB,QAAsCH,OAA5C;AACA,UAAMI,MAAM,GAAGf,mBAAmB,CAACa,MAAD,CAAlC;;AAEA,QAAIE,MAAM,IAAI,IAAd,EAAoB;AAChB,YAAM,IAAIhB,oBAAJ,CACD,uBAAsBc,MAAO,EAD5B,EAEFH,GAFE,EAGD,GAAEE,IAAK,SAHN,CAAN;AAKH;;AAED,UAAMI,cAAc,GAAGlB,OAAO,CAAE,aAAYiB,MAAO,KAArB,CAA9B;;AACA,UAAME,OAAO,GAAG,IAAID,cAAJ,CAAmBN,GAAnB,EAAwBI,cAAxB,CAAhB;AAEAJ,IAAAA,GAAG,CAACQ,eAAJ,CAAoBN,IAApB,EAA0BK,OAA1B;AACH;AA9CY,CAAjB","sourcesContent":["const {\n    Feature,\n    Helpers: { requireConfig },\n} = require('@genx/app');\nconst { InvalidConfiguration } = require('@genx/error');\n\nconst mapOfVendorToDriver = {\n    digitalocean: 's3',\n    aws: 's3',\n    azure: 'azure',\n};\n\n/**\n * General cloud storage feature\n * @module Feature_CloudStorage\n */\n\nmodule.exports = {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    type: Feature.SERVICE,\n\n    /**\n     * This feature can be grouped by serviceGroup\n     * @member {boolean}\n     */\n    groupable: true,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} options - Options for the feature\n     * @property {string} options.vendor - Cloud storage vendor.\n     * @property {object} options.options - Storage driver options.\n     * @returns {Promise.<*>}\n     *\n     * @example\n     *\n     * vendor: 'digitalocean',\n     * options: {\n     *\n     * }\n     */\n    load_: async function (app, options, name) {\n        requireConfig(app, options, ['vendor', 'options'], name);\n\n        const { vendor, options: serviceOptions } = options;\n        const driver = mapOfVendorToDriver[vendor];\n\n        if (driver == null) {\n            throw new InvalidConfiguration(\n                `Unsupported vendor: ${vendor}`,\n                app,\n                `${name}.vendor`\n            );\n        }\n\n        const StorageService = require(`./drivers/${driver}.js`);\n        const service = new StorageService(app, serviceOptions);\n\n        app.registerService(name, service);\n    },\n};\n"],"file":"index.js"}